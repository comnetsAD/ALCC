// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dna.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "dna.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RemyBuffers {

namespace {

const ::google::protobuf::Descriptor* WhiskerTree_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WhiskerTree_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemoryRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemoryRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* Memory_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Memory_reflection_ = NULL;
const ::google::protobuf::Descriptor* Whisker_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Whisker_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizationSetting_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizationSetting_reflection_ = NULL;
const ::google::protobuf::Descriptor* OptimizationSettings_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OptimizationSettings_reflection_ = NULL;
const ::google::protobuf::Descriptor* Range_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Range_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigRange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigRange_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetConfig_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_dna_2eproto() {
  protobuf_AddDesc_dna_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "dna.proto");
  GOOGLE_CHECK(file != NULL);
  WhiskerTree_descriptor_ = file->message_type(0);
  static const int WhiskerTree_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, leaf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, optimizer_),
  };
  WhiskerTree_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WhiskerTree_descriptor_,
      WhiskerTree::default_instance_,
      WhiskerTree_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WhiskerTree, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WhiskerTree));
  MemoryRange_descriptor_ = file->message_type(1);
  static const int MemoryRange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, lower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, upper_),
  };
  MemoryRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemoryRange_descriptor_,
      MemoryRange::default_instance_,
      MemoryRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemoryRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemoryRange));
  Memory_descriptor_ = file->message_type(2);
  static const int Memory_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_send_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rec_rec_ewma_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, rtt_ratio_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, loss_rate_),
  };
  Memory_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Memory_descriptor_,
      Memory::default_instance_,
      Memory_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Memory, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Memory));
  Whisker_descriptor_ = file->message_type(3);
  static const int Whisker_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, window_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, intersend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, domain_),
  };
  Whisker_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Whisker_descriptor_,
      Whisker::default_instance_,
      Whisker_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Whisker, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Whisker));
  OptimizationSetting_descriptor_ = file->message_type(4);
  static const int OptimizationSetting_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, min_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, max_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, min_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, max_change_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, multiplier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, default_value_),
  };
  OptimizationSetting_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptimizationSetting_descriptor_,
      OptimizationSetting::default_instance_,
      OptimizationSetting_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSetting, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptimizationSetting));
  OptimizationSettings_descriptor_ = file->message_type(5);
  static const int OptimizationSettings_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, window_increment_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, window_multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, intersend_),
  };
  OptimizationSettings_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OptimizationSettings_descriptor_,
      OptimizationSettings::default_instance_,
      OptimizationSettings_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OptimizationSettings, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OptimizationSettings));
  Range_descriptor_ = file->message_type(6);
  static const int Range_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, low_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, high_),
  };
  Range_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Range_descriptor_,
      Range::default_instance_,
      Range_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Range, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Range));
  ConfigRange_descriptor_ = file->message_type(7);
  static const int ConfigRange_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, link_packets_per_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, rtt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, num_senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, link_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, mean_off_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, mean_on_duration_),
  };
  ConfigRange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConfigRange_descriptor_,
      ConfigRange::default_instance_,
      ConfigRange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigRange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConfigRange));
  NetConfig_descriptor_ = file->message_type(8);
  static const int NetConfig_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, mean_on_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, mean_off_duration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, num_senders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, link_ppt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, delay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, link_limit_),
  };
  NetConfig_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetConfig_descriptor_,
      NetConfig::default_instance_,
      NetConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetConfig, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_dna_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WhiskerTree_descriptor_, &WhiskerTree::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemoryRange_descriptor_, &MemoryRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Memory_descriptor_, &Memory::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Whisker_descriptor_, &Whisker::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptimizationSetting_descriptor_, &OptimizationSetting::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OptimizationSettings_descriptor_, &OptimizationSettings::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Range_descriptor_, &Range::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConfigRange_descriptor_, &ConfigRange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetConfig_descriptor_, &NetConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_dna_2eproto() {
  delete WhiskerTree::default_instance_;
  delete WhiskerTree_reflection_;
  delete MemoryRange::default_instance_;
  delete MemoryRange_reflection_;
  delete Memory::default_instance_;
  delete Memory_reflection_;
  delete Whisker::default_instance_;
  delete Whisker_reflection_;
  delete OptimizationSetting::default_instance_;
  delete OptimizationSetting_reflection_;
  delete OptimizationSettings::default_instance_;
  delete OptimizationSettings_reflection_;
  delete Range::default_instance_;
  delete Range_reflection_;
  delete ConfigRange::default_instance_;
  delete ConfigRange_reflection_;
  delete NetConfig::default_instance_;
  delete NetConfig_reflection_;
}

void protobuf_AddDesc_dna_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\tdna.proto\022\013RemyBuffers\"\347\001\n\013WhiskerTree"
    "\022(\n\006domain\030\001 \001(\0132\030.RemyBuffers.MemoryRan"
    "ge\022*\n\010children\030\002 \003(\0132\030.RemyBuffers.Whisk"
    "erTree\022\"\n\004leaf\030\003 \001(\0132\024.RemyBuffers.Whisk"
    "er\022(\n\006config\030\004 \001(\0132\030.RemyBuffers.ConfigR"
    "ange\0224\n\toptimizer\030\005 \001(\0132!.RemyBuffers.Op"
    "timizationSettings\"U\n\013MemoryRange\022\"\n\005low"
    "er\030\013 \001(\0132\023.RemyBuffers.Memory\022\"\n\005upper\030\014"
    " \001(\0132\023.RemyBuffers.Memory\"[\n\006Memory\022\025\n\rr"
    "ec_send_ewma\030\025 \001(\001\022\024\n\014rec_rec_ewma\030\026 \001(\001"
    "\022\021\n\trtt_ratio\030\027 \001(\001\022\021\n\tloss_rate\030\031 \001(\001\"y"
    "\n\007Whisker\022\030\n\020window_increment\030\037 \001(\021\022\027\n\017w"
    "indow_multiple\030  \001(\001\022\021\n\tintersend\030! \001(\001\022"
    "(\n\006domain\030\" \001(\0132\030.RemyBuffers.MemoryRang"
    "e\"\216\001\n\023OptimizationSetting\022\021\n\tmin_value\030)"
    " \001(\001\022\021\n\tmax_value\030* \001(\001\022\022\n\nmin_change\030+ "
    "\001(\001\022\022\n\nmax_change\030, \001(\001\022\022\n\nmultiplier\030- "
    "\001(\001\022\025\n\rdefault_value\030. \001(\001\"\302\001\n\024Optimizat"
    "ionSettings\022:\n\020window_increment\0303 \001(\0132 ."
    "RemyBuffers.OptimizationSetting\0229\n\017windo"
    "w_multiple\0304 \001(\0132 .RemyBuffers.Optimizat"
    "ionSetting\0223\n\tintersend\0305 \001(\0132 .RemyBuff"
    "ers.OptimizationSetting\"\"\n\005Range\022\013\n\003low\030"
    "= \001(\001\022\014\n\004high\030> \001(\001\"\345\001\n\013ConfigRange\022/\n\023l"
    "ink_packets_per_ms\030G \001(\0132\022.RemyBuffers.R"
    "ange\022\037\n\003rtt\030H \001(\0132\022.RemyBuffers.Range\022\'\n"
    "\013num_senders\030I \001(\0132\022.RemyBuffers.Range\022&"
    "\n\nlink_limit\030J \001(\0132\022.RemyBuffers.Range\022\031"
    "\n\021mean_off_duration\030Q \001(\001\022\030\n\020mean_on_dur"
    "ation\030R \001(\001\"\212\001\n\tNetConfig\022\030\n\020mean_on_dur"
    "ation\030\001 \001(\001\022\031\n\021mean_off_duration\030\002 \001(\001\022\023"
    "\n\013num_senders\030\003 \001(\r\022\020\n\010link_ppt\030\004 \001(\001\022\r\n"
    "\005delay\030\005 \001(\001\022\022\n\nlink_limit\030\006 \001(\r", 1312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "dna.proto", &protobuf_RegisterTypes);
  WhiskerTree::default_instance_ = new WhiskerTree();
  MemoryRange::default_instance_ = new MemoryRange();
  Memory::default_instance_ = new Memory();
  Whisker::default_instance_ = new Whisker();
  OptimizationSetting::default_instance_ = new OptimizationSetting();
  OptimizationSettings::default_instance_ = new OptimizationSettings();
  Range::default_instance_ = new Range();
  ConfigRange::default_instance_ = new ConfigRange();
  NetConfig::default_instance_ = new NetConfig();
  WhiskerTree::default_instance_->InitAsDefaultInstance();
  MemoryRange::default_instance_->InitAsDefaultInstance();
  Memory::default_instance_->InitAsDefaultInstance();
  Whisker::default_instance_->InitAsDefaultInstance();
  OptimizationSetting::default_instance_->InitAsDefaultInstance();
  OptimizationSettings::default_instance_->InitAsDefaultInstance();
  Range::default_instance_->InitAsDefaultInstance();
  ConfigRange::default_instance_->InitAsDefaultInstance();
  NetConfig::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_dna_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_dna_2eproto {
  StaticDescriptorInitializer_dna_2eproto() {
    protobuf_AddDesc_dna_2eproto();
  }
} static_descriptor_initializer_dna_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WhiskerTree::kDomainFieldNumber;
const int WhiskerTree::kChildrenFieldNumber;
const int WhiskerTree::kLeafFieldNumber;
const int WhiskerTree::kConfigFieldNumber;
const int WhiskerTree::kOptimizerFieldNumber;
#endif  // !_MSC_VER

WhiskerTree::WhiskerTree()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WhiskerTree::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
  leaf_ = const_cast< ::RemyBuffers::Whisker*>(&::RemyBuffers::Whisker::default_instance());
  config_ = const_cast< ::RemyBuffers::ConfigRange*>(&::RemyBuffers::ConfigRange::default_instance());
  optimizer_ = const_cast< ::RemyBuffers::OptimizationSettings*>(&::RemyBuffers::OptimizationSettings::default_instance());
}

WhiskerTree::WhiskerTree(const WhiskerTree& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WhiskerTree::SharedCtor() {
  _cached_size_ = 0;
  domain_ = NULL;
  leaf_ = NULL;
  config_ = NULL;
  optimizer_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WhiskerTree::~WhiskerTree() {
  SharedDtor();
}

void WhiskerTree::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
    delete leaf_;
    delete config_;
    delete optimizer_;
  }
}

void WhiskerTree::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WhiskerTree::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WhiskerTree_descriptor_;
}

const WhiskerTree& WhiskerTree::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

WhiskerTree* WhiskerTree::default_instance_ = NULL;

WhiskerTree* WhiskerTree::New() const {
  return new WhiskerTree;
}

void WhiskerTree::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
    if (has_leaf()) {
      if (leaf_ != NULL) leaf_->::RemyBuffers::Whisker::Clear();
    }
    if (has_config()) {
      if (config_ != NULL) config_->::RemyBuffers::ConfigRange::Clear();
    }
    if (has_optimizer()) {
      if (optimizer_ != NULL) optimizer_->::RemyBuffers::OptimizationSettings::Clear();
    }
  }
  children_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WhiskerTree::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.MemoryRange domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        break;
      }

      // repeated .RemyBuffers.WhiskerTree children = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_children;
        if (input->ExpectTag(26)) goto parse_leaf;
        break;
      }

      // optional .RemyBuffers.Whisker leaf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_leaf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_config;
        break;
      }

      // optional .RemyBuffers.ConfigRange config = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_config:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_optimizer;
        break;
      }

      // optional .RemyBuffers.OptimizationSettings optimizer = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_optimizer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_optimizer()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WhiskerTree::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->domain(), output);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->children(i), output);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->leaf(), output);
  }

  // optional .RemyBuffers.ConfigRange config = 4;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->config(), output);
  }

  // optional .RemyBuffers.OptimizationSettings optimizer = 5;
  if (has_optimizer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->optimizer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WhiskerTree::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.MemoryRange domain = 1;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->domain(), target);
  }

  // repeated .RemyBuffers.WhiskerTree children = 2;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->children(i), target);
  }

  // optional .RemyBuffers.Whisker leaf = 3;
  if (has_leaf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->leaf(), target);
  }

  // optional .RemyBuffers.ConfigRange config = 4;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->config(), target);
  }

  // optional .RemyBuffers.OptimizationSettings optimizer = 5;
  if (has_optimizer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->optimizer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WhiskerTree::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.MemoryRange domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domain());
    }

    // optional .RemyBuffers.Whisker leaf = 3;
    if (has_leaf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->leaf());
    }

    // optional .RemyBuffers.ConfigRange config = 4;
    if (has_config()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

    // optional .RemyBuffers.OptimizationSettings optimizer = 5;
    if (has_optimizer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->optimizer());
    }

  }
  // repeated .RemyBuffers.WhiskerTree children = 2;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WhiskerTree::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WhiskerTree* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WhiskerTree*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WhiskerTree::MergeFrom(const WhiskerTree& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
    if (from.has_leaf()) {
      mutable_leaf()->::RemyBuffers::Whisker::MergeFrom(from.leaf());
    }
    if (from.has_config()) {
      mutable_config()->::RemyBuffers::ConfigRange::MergeFrom(from.config());
    }
    if (from.has_optimizer()) {
      mutable_optimizer()->::RemyBuffers::OptimizationSettings::MergeFrom(from.optimizer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WhiskerTree::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WhiskerTree::CopyFrom(const WhiskerTree& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WhiskerTree::IsInitialized() const {

  return true;
}

void WhiskerTree::Swap(WhiskerTree* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    children_.Swap(&other->children_);
    std::swap(leaf_, other->leaf_);
    std::swap(config_, other->config_);
    std::swap(optimizer_, other->optimizer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WhiskerTree::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WhiskerTree_descriptor_;
  metadata.reflection = WhiskerTree_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemoryRange::kLowerFieldNumber;
const int MemoryRange::kUpperFieldNumber;
#endif  // !_MSC_VER

MemoryRange::MemoryRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemoryRange::InitAsDefaultInstance() {
  lower_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
  upper_ = const_cast< ::RemyBuffers::Memory*>(&::RemyBuffers::Memory::default_instance());
}

MemoryRange::MemoryRange(const MemoryRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemoryRange::SharedCtor() {
  _cached_size_ = 0;
  lower_ = NULL;
  upper_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemoryRange::~MemoryRange() {
  SharedDtor();
}

void MemoryRange::SharedDtor() {
  if (this != default_instance_) {
    delete lower_;
    delete upper_;
  }
}

void MemoryRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemoryRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemoryRange_descriptor_;
}

const MemoryRange& MemoryRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

MemoryRange* MemoryRange::default_instance_ = NULL;

MemoryRange* MemoryRange::New() const {
  return new MemoryRange;
}

void MemoryRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_lower()) {
      if (lower_ != NULL) lower_->::RemyBuffers::Memory::Clear();
    }
    if (has_upper()) {
      if (upper_ != NULL) upper_->::RemyBuffers::Memory::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemoryRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.Memory lower = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lower()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_upper;
        break;
      }

      // optional .RemyBuffers.Memory upper = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_upper:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upper()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemoryRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->lower(), output);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->upper(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemoryRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.Memory lower = 11;
  if (has_lower()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->lower(), target);
  }

  // optional .RemyBuffers.Memory upper = 12;
  if (has_upper()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->upper(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemoryRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.Memory lower = 11;
    if (has_lower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lower());
    }

    // optional .RemyBuffers.Memory upper = 12;
    if (has_upper()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->upper());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemoryRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemoryRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemoryRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemoryRange::MergeFrom(const MemoryRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lower()) {
      mutable_lower()->::RemyBuffers::Memory::MergeFrom(from.lower());
    }
    if (from.has_upper()) {
      mutable_upper()->::RemyBuffers::Memory::MergeFrom(from.upper());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemoryRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemoryRange::CopyFrom(const MemoryRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemoryRange::IsInitialized() const {

  return true;
}

void MemoryRange::Swap(MemoryRange* other) {
  if (other != this) {
    std::swap(lower_, other->lower_);
    std::swap(upper_, other->upper_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemoryRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemoryRange_descriptor_;
  metadata.reflection = MemoryRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Memory::kRecSendEwmaFieldNumber;
const int Memory::kRecRecEwmaFieldNumber;
const int Memory::kRttRatioFieldNumber;
const int Memory::kLossRateFieldNumber;
#endif  // !_MSC_VER

Memory::Memory()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Memory::InitAsDefaultInstance() {
}

Memory::Memory(const Memory& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Memory::SharedCtor() {
  _cached_size_ = 0;
  rec_send_ewma_ = 0;
  rec_rec_ewma_ = 0;
  rtt_ratio_ = 0;
  loss_rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Memory::~Memory() {
  SharedDtor();
}

void Memory::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Memory::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Memory_descriptor_;
}

const Memory& Memory::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

Memory* Memory::default_instance_ = NULL;

Memory* Memory::New() const {
  return new Memory;
}

void Memory::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rec_send_ewma_ = 0;
    rec_rec_ewma_ = 0;
    rtt_ratio_ = 0;
    loss_rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double rec_send_ewma = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_send_ewma_)));
          set_has_rec_send_ewma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(177)) goto parse_rec_rec_ewma;
        break;
      }

      // optional double rec_rec_ewma = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rec_rec_ewma:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rec_rec_ewma_)));
          set_has_rec_rec_ewma();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(185)) goto parse_rtt_ratio;
        break;
      }

      // optional double rtt_ratio = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_rtt_ratio:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rtt_ratio_)));
          set_has_rtt_ratio();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(201)) goto parse_loss_rate;
        break;
      }

      // optional double loss_rate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loss_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &loss_rate_)));
          set_has_loss_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->rec_send_ewma(), output);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->rec_rec_ewma(), output);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(23, this->rtt_ratio(), output);
  }

  // optional double loss_rate = 25;
  if (has_loss_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(25, this->loss_rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Memory::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double rec_send_ewma = 21;
  if (has_rec_send_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->rec_send_ewma(), target);
  }

  // optional double rec_rec_ewma = 22;
  if (has_rec_rec_ewma()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->rec_rec_ewma(), target);
  }

  // optional double rtt_ratio = 23;
  if (has_rtt_ratio()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(23, this->rtt_ratio(), target);
  }

  // optional double loss_rate = 25;
  if (has_loss_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(25, this->loss_rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Memory::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double rec_send_ewma = 21;
    if (has_rec_send_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rec_rec_ewma = 22;
    if (has_rec_rec_ewma()) {
      total_size += 2 + 8;
    }

    // optional double rtt_ratio = 23;
    if (has_rtt_ratio()) {
      total_size += 2 + 8;
    }

    // optional double loss_rate = 25;
    if (has_loss_rate()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Memory* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Memory*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Memory::MergeFrom(const Memory& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rec_send_ewma()) {
      set_rec_send_ewma(from.rec_send_ewma());
    }
    if (from.has_rec_rec_ewma()) {
      set_rec_rec_ewma(from.rec_rec_ewma());
    }
    if (from.has_rtt_ratio()) {
      set_rtt_ratio(from.rtt_ratio());
    }
    if (from.has_loss_rate()) {
      set_loss_rate(from.loss_rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Memory::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Memory::CopyFrom(const Memory& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {

  return true;
}

void Memory::Swap(Memory* other) {
  if (other != this) {
    std::swap(rec_send_ewma_, other->rec_send_ewma_);
    std::swap(rec_rec_ewma_, other->rec_rec_ewma_);
    std::swap(rtt_ratio_, other->rtt_ratio_);
    std::swap(loss_rate_, other->loss_rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Memory::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Memory_descriptor_;
  metadata.reflection = Memory_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Whisker::kWindowIncrementFieldNumber;
const int Whisker::kWindowMultipleFieldNumber;
const int Whisker::kIntersendFieldNumber;
const int Whisker::kDomainFieldNumber;
#endif  // !_MSC_VER

Whisker::Whisker()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Whisker::InitAsDefaultInstance() {
  domain_ = const_cast< ::RemyBuffers::MemoryRange*>(&::RemyBuffers::MemoryRange::default_instance());
}

Whisker::Whisker(const Whisker& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Whisker::SharedCtor() {
  _cached_size_ = 0;
  window_increment_ = 0;
  window_multiple_ = 0;
  intersend_ = 0;
  domain_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Whisker::~Whisker() {
  SharedDtor();
}

void Whisker::SharedDtor() {
  if (this != default_instance_) {
    delete domain_;
  }
}

void Whisker::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Whisker::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Whisker_descriptor_;
}

const Whisker& Whisker::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

Whisker* Whisker::default_instance_ = NULL;

Whisker* Whisker::New() const {
  return new Whisker;
}

void Whisker::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    window_increment_ = 0;
    window_multiple_ = 0;
    intersend_ = 0;
    if (has_domain()) {
      if (domain_ != NULL) domain_->::RemyBuffers::MemoryRange::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Whisker::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional sint32 window_increment = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_SINT32>(
                 input, &window_increment_)));
          set_has_window_increment();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(257)) goto parse_window_multiple;
        break;
      }

      // optional double window_multiple = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_window_multiple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &window_multiple_)));
          set_has_window_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(265)) goto parse_intersend;
        break;
      }

      // optional double intersend = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_intersend:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &intersend_)));
          set_has_intersend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_domain;
        break;
      }

      // optional .RemyBuffers.MemoryRange domain = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_domain:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_domain()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Whisker::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteSInt32(31, this->window_increment(), output);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(32, this->window_multiple(), output);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->intersend(), output);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->domain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Whisker::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional sint32 window_increment = 31;
  if (has_window_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSInt32ToArray(31, this->window_increment(), target);
  }

  // optional double window_multiple = 32;
  if (has_window_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(32, this->window_multiple(), target);
  }

  // optional double intersend = 33;
  if (has_intersend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->intersend(), target);
  }

  // optional .RemyBuffers.MemoryRange domain = 34;
  if (has_domain()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->domain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Whisker::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional sint32 window_increment = 31;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::SInt32Size(
          this->window_increment());
    }

    // optional double window_multiple = 32;
    if (has_window_multiple()) {
      total_size += 2 + 8;
    }

    // optional double intersend = 33;
    if (has_intersend()) {
      total_size += 2 + 8;
    }

    // optional .RemyBuffers.MemoryRange domain = 34;
    if (has_domain()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->domain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Whisker::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Whisker* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Whisker*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Whisker::MergeFrom(const Whisker& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_increment()) {
      set_window_increment(from.window_increment());
    }
    if (from.has_window_multiple()) {
      set_window_multiple(from.window_multiple());
    }
    if (from.has_intersend()) {
      set_intersend(from.intersend());
    }
    if (from.has_domain()) {
      mutable_domain()->::RemyBuffers::MemoryRange::MergeFrom(from.domain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Whisker::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Whisker::CopyFrom(const Whisker& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Whisker::IsInitialized() const {

  return true;
}

void Whisker::Swap(Whisker* other) {
  if (other != this) {
    std::swap(window_increment_, other->window_increment_);
    std::swap(window_multiple_, other->window_multiple_);
    std::swap(intersend_, other->intersend_);
    std::swap(domain_, other->domain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Whisker::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Whisker_descriptor_;
  metadata.reflection = Whisker_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptimizationSetting::kMinValueFieldNumber;
const int OptimizationSetting::kMaxValueFieldNumber;
const int OptimizationSetting::kMinChangeFieldNumber;
const int OptimizationSetting::kMaxChangeFieldNumber;
const int OptimizationSetting::kMultiplierFieldNumber;
const int OptimizationSetting::kDefaultValueFieldNumber;
#endif  // !_MSC_VER

OptimizationSetting::OptimizationSetting()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OptimizationSetting::InitAsDefaultInstance() {
}

OptimizationSetting::OptimizationSetting(const OptimizationSetting& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OptimizationSetting::SharedCtor() {
  _cached_size_ = 0;
  min_value_ = 0;
  max_value_ = 0;
  min_change_ = 0;
  max_change_ = 0;
  multiplier_ = 0;
  default_value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizationSetting::~OptimizationSetting() {
  SharedDtor();
}

void OptimizationSetting::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OptimizationSetting::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizationSetting::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizationSetting_descriptor_;
}

const OptimizationSetting& OptimizationSetting::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

OptimizationSetting* OptimizationSetting::default_instance_ = NULL;

OptimizationSetting* OptimizationSetting::New() const {
  return new OptimizationSetting;
}

void OptimizationSetting::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    min_value_ = 0;
    max_value_ = 0;
    min_change_ = 0;
    max_change_ = 0;
    multiplier_ = 0;
    default_value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptimizationSetting::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double min_value = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_value_)));
          set_has_min_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(337)) goto parse_max_value;
        break;
      }

      // optional double max_value = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_value_)));
          set_has_max_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(345)) goto parse_min_change;
        break;
      }

      // optional double min_change = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_min_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &min_change_)));
          set_has_min_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(353)) goto parse_max_change;
        break;
      }

      // optional double max_change = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_max_change:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &max_change_)));
          set_has_max_change();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(361)) goto parse_multiplier;
        break;
      }

      // optional double multiplier = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_multiplier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &multiplier_)));
          set_has_multiplier();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(369)) goto parse_default_value;
        break;
      }

      // optional double default_value = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_default_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &default_value_)));
          set_has_default_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OptimizationSetting::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double min_value = 41;
  if (has_min_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->min_value(), output);
  }

  // optional double max_value = 42;
  if (has_max_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->max_value(), output);
  }

  // optional double min_change = 43;
  if (has_min_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->min_change(), output);
  }

  // optional double max_change = 44;
  if (has_max_change()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(44, this->max_change(), output);
  }

  // optional double multiplier = 45;
  if (has_multiplier()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(45, this->multiplier(), output);
  }

  // optional double default_value = 46;
  if (has_default_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(46, this->default_value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OptimizationSetting::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double min_value = 41;
  if (has_min_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->min_value(), target);
  }

  // optional double max_value = 42;
  if (has_max_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->max_value(), target);
  }

  // optional double min_change = 43;
  if (has_min_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->min_change(), target);
  }

  // optional double max_change = 44;
  if (has_max_change()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(44, this->max_change(), target);
  }

  // optional double multiplier = 45;
  if (has_multiplier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(45, this->multiplier(), target);
  }

  // optional double default_value = 46;
  if (has_default_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(46, this->default_value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OptimizationSetting::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double min_value = 41;
    if (has_min_value()) {
      total_size += 2 + 8;
    }

    // optional double max_value = 42;
    if (has_max_value()) {
      total_size += 2 + 8;
    }

    // optional double min_change = 43;
    if (has_min_change()) {
      total_size += 2 + 8;
    }

    // optional double max_change = 44;
    if (has_max_change()) {
      total_size += 2 + 8;
    }

    // optional double multiplier = 45;
    if (has_multiplier()) {
      total_size += 2 + 8;
    }

    // optional double default_value = 46;
    if (has_default_value()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizationSetting::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptimizationSetting* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptimizationSetting*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptimizationSetting::MergeFrom(const OptimizationSetting& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_min_value()) {
      set_min_value(from.min_value());
    }
    if (from.has_max_value()) {
      set_max_value(from.max_value());
    }
    if (from.has_min_change()) {
      set_min_change(from.min_change());
    }
    if (from.has_max_change()) {
      set_max_change(from.max_change());
    }
    if (from.has_multiplier()) {
      set_multiplier(from.multiplier());
    }
    if (from.has_default_value()) {
      set_default_value(from.default_value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptimizationSetting::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationSetting::CopyFrom(const OptimizationSetting& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationSetting::IsInitialized() const {

  return true;
}

void OptimizationSetting::Swap(OptimizationSetting* other) {
  if (other != this) {
    std::swap(min_value_, other->min_value_);
    std::swap(max_value_, other->max_value_);
    std::swap(min_change_, other->min_change_);
    std::swap(max_change_, other->max_change_);
    std::swap(multiplier_, other->multiplier_);
    std::swap(default_value_, other->default_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptimizationSetting::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizationSetting_descriptor_;
  metadata.reflection = OptimizationSetting_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OptimizationSettings::kWindowIncrementFieldNumber;
const int OptimizationSettings::kWindowMultipleFieldNumber;
const int OptimizationSettings::kIntersendFieldNumber;
#endif  // !_MSC_VER

OptimizationSettings::OptimizationSettings()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OptimizationSettings::InitAsDefaultInstance() {
  window_increment_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
  window_multiple_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
  intersend_ = const_cast< ::RemyBuffers::OptimizationSetting*>(&::RemyBuffers::OptimizationSetting::default_instance());
}

OptimizationSettings::OptimizationSettings(const OptimizationSettings& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OptimizationSettings::SharedCtor() {
  _cached_size_ = 0;
  window_increment_ = NULL;
  window_multiple_ = NULL;
  intersend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OptimizationSettings::~OptimizationSettings() {
  SharedDtor();
}

void OptimizationSettings::SharedDtor() {
  if (this != default_instance_) {
    delete window_increment_;
    delete window_multiple_;
    delete intersend_;
  }
}

void OptimizationSettings::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OptimizationSettings::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OptimizationSettings_descriptor_;
}

const OptimizationSettings& OptimizationSettings::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

OptimizationSettings* OptimizationSettings::default_instance_ = NULL;

OptimizationSettings* OptimizationSettings::New() const {
  return new OptimizationSettings;
}

void OptimizationSettings::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_window_increment()) {
      if (window_increment_ != NULL) window_increment_->::RemyBuffers::OptimizationSetting::Clear();
    }
    if (has_window_multiple()) {
      if (window_multiple_ != NULL) window_multiple_->::RemyBuffers::OptimizationSetting::Clear();
    }
    if (has_intersend()) {
      if (intersend_ != NULL) intersend_->::RemyBuffers::OptimizationSetting::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OptimizationSettings::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.OptimizationSetting window_increment = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_increment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(418)) goto parse_window_multiple;
        break;
      }

      // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_window_multiple:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_window_multiple()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(426)) goto parse_intersend;
        break;
      }

      // optional .RemyBuffers.OptimizationSetting intersend = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_intersend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_intersend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OptimizationSettings::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.OptimizationSetting window_increment = 51;
  if (has_window_increment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      51, this->window_increment(), output);
  }

  // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
  if (has_window_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      52, this->window_multiple(), output);
  }

  // optional .RemyBuffers.OptimizationSetting intersend = 53;
  if (has_intersend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      53, this->intersend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OptimizationSettings::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.OptimizationSetting window_increment = 51;
  if (has_window_increment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        51, this->window_increment(), target);
  }

  // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
  if (has_window_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        52, this->window_multiple(), target);
  }

  // optional .RemyBuffers.OptimizationSetting intersend = 53;
  if (has_intersend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        53, this->intersend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OptimizationSettings::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.OptimizationSetting window_increment = 51;
    if (has_window_increment()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_increment());
    }

    // optional .RemyBuffers.OptimizationSetting window_multiple = 52;
    if (has_window_multiple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->window_multiple());
    }

    // optional .RemyBuffers.OptimizationSetting intersend = 53;
    if (has_intersend()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->intersend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OptimizationSettings::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OptimizationSettings* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OptimizationSettings*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OptimizationSettings::MergeFrom(const OptimizationSettings& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_window_increment()) {
      mutable_window_increment()->::RemyBuffers::OptimizationSetting::MergeFrom(from.window_increment());
    }
    if (from.has_window_multiple()) {
      mutable_window_multiple()->::RemyBuffers::OptimizationSetting::MergeFrom(from.window_multiple());
    }
    if (from.has_intersend()) {
      mutable_intersend()->::RemyBuffers::OptimizationSetting::MergeFrom(from.intersend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OptimizationSettings::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OptimizationSettings::CopyFrom(const OptimizationSettings& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OptimizationSettings::IsInitialized() const {

  return true;
}

void OptimizationSettings::Swap(OptimizationSettings* other) {
  if (other != this) {
    std::swap(window_increment_, other->window_increment_);
    std::swap(window_multiple_, other->window_multiple_);
    std::swap(intersend_, other->intersend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OptimizationSettings::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OptimizationSettings_descriptor_;
  metadata.reflection = OptimizationSettings_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Range::kLowFieldNumber;
const int Range::kHighFieldNumber;
#endif  // !_MSC_VER

Range::Range()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Range::InitAsDefaultInstance() {
}

Range::Range(const Range& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Range::SharedCtor() {
  _cached_size_ = 0;
  low_ = 0;
  high_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Range::~Range() {
  SharedDtor();
}

void Range::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Range::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Range::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Range_descriptor_;
}

const Range& Range::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

Range* Range::default_instance_ = NULL;

Range* Range::New() const {
  return new Range;
}

void Range::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    low_ = 0;
    high_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Range::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double low = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &low_)));
          set_has_low();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(497)) goto parse_high;
        break;
      }

      // optional double high = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_high:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &high_)));
          set_has_high();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Range::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double low = 61;
  if (has_low()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(61, this->low(), output);
  }

  // optional double high = 62;
  if (has_high()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(62, this->high(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Range::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double low = 61;
  if (has_low()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(61, this->low(), target);
  }

  // optional double high = 62;
  if (has_high()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(62, this->high(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Range::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double low = 61;
    if (has_low()) {
      total_size += 2 + 8;
    }

    // optional double high = 62;
    if (has_high()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Range::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Range* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Range*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Range::MergeFrom(const Range& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_low()) {
      set_low(from.low());
    }
    if (from.has_high()) {
      set_high(from.high());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Range::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Range::CopyFrom(const Range& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Range::IsInitialized() const {

  return true;
}

void Range::Swap(Range* other) {
  if (other != this) {
    std::swap(low_, other->low_);
    std::swap(high_, other->high_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Range::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Range_descriptor_;
  metadata.reflection = Range_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConfigRange::kLinkPacketsPerMsFieldNumber;
const int ConfigRange::kRttFieldNumber;
const int ConfigRange::kNumSendersFieldNumber;
const int ConfigRange::kLinkLimitFieldNumber;
const int ConfigRange::kMeanOffDurationFieldNumber;
const int ConfigRange::kMeanOnDurationFieldNumber;
#endif  // !_MSC_VER

ConfigRange::ConfigRange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ConfigRange::InitAsDefaultInstance() {
  link_packets_per_ms_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  rtt_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  num_senders_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
  link_limit_ = const_cast< ::RemyBuffers::Range*>(&::RemyBuffers::Range::default_instance());
}

ConfigRange::ConfigRange(const ConfigRange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ConfigRange::SharedCtor() {
  _cached_size_ = 0;
  link_packets_per_ms_ = NULL;
  rtt_ = NULL;
  num_senders_ = NULL;
  link_limit_ = NULL;
  mean_off_duration_ = 0;
  mean_on_duration_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigRange::~ConfigRange() {
  SharedDtor();
}

void ConfigRange::SharedDtor() {
  if (this != default_instance_) {
    delete link_packets_per_ms_;
    delete rtt_;
    delete num_senders_;
    delete link_limit_;
  }
}

void ConfigRange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigRange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigRange_descriptor_;
}

const ConfigRange& ConfigRange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

ConfigRange* ConfigRange::default_instance_ = NULL;

ConfigRange* ConfigRange::New() const {
  return new ConfigRange;
}

void ConfigRange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_link_packets_per_ms()) {
      if (link_packets_per_ms_ != NULL) link_packets_per_ms_->::RemyBuffers::Range::Clear();
    }
    if (has_rtt()) {
      if (rtt_ != NULL) rtt_->::RemyBuffers::Range::Clear();
    }
    if (has_num_senders()) {
      if (num_senders_ != NULL) num_senders_->::RemyBuffers::Range::Clear();
    }
    if (has_link_limit()) {
      if (link_limit_ != NULL) link_limit_->::RemyBuffers::Range::Clear();
    }
    mean_off_duration_ = 0;
    mean_on_duration_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConfigRange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.Range link_packets_per_ms = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_packets_per_ms()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(578)) goto parse_rtt;
        break;
      }

      // optional .RemyBuffers.Range rtt = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rtt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rtt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_num_senders;
        break;
      }

      // optional .RemyBuffers.Range num_senders = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_num_senders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_num_senders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_link_limit;
        break;
      }

      // optional .RemyBuffers.Range link_limit = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_link_limit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_link_limit()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(649)) goto parse_mean_off_duration;
        break;
      }

      // optional double mean_off_duration = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mean_off_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_off_duration_)));
          set_has_mean_off_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(657)) goto parse_mean_on_duration;
        break;
      }

      // optional double mean_on_duration = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mean_on_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_on_duration_)));
          set_has_mean_on_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ConfigRange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.Range link_packets_per_ms = 71;
  if (has_link_packets_per_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      71, this->link_packets_per_ms(), output);
  }

  // optional .RemyBuffers.Range rtt = 72;
  if (has_rtt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      72, this->rtt(), output);
  }

  // optional .RemyBuffers.Range num_senders = 73;
  if (has_num_senders()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      73, this->num_senders(), output);
  }

  // optional .RemyBuffers.Range link_limit = 74;
  if (has_link_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      74, this->link_limit(), output);
  }

  // optional double mean_off_duration = 81;
  if (has_mean_off_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(81, this->mean_off_duration(), output);
  }

  // optional double mean_on_duration = 82;
  if (has_mean_on_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(82, this->mean_on_duration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ConfigRange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.Range link_packets_per_ms = 71;
  if (has_link_packets_per_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        71, this->link_packets_per_ms(), target);
  }

  // optional .RemyBuffers.Range rtt = 72;
  if (has_rtt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        72, this->rtt(), target);
  }

  // optional .RemyBuffers.Range num_senders = 73;
  if (has_num_senders()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        73, this->num_senders(), target);
  }

  // optional .RemyBuffers.Range link_limit = 74;
  if (has_link_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        74, this->link_limit(), target);
  }

  // optional double mean_off_duration = 81;
  if (has_mean_off_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(81, this->mean_off_duration(), target);
  }

  // optional double mean_on_duration = 82;
  if (has_mean_on_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(82, this->mean_on_duration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ConfigRange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.Range link_packets_per_ms = 71;
    if (has_link_packets_per_ms()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_packets_per_ms());
    }

    // optional .RemyBuffers.Range rtt = 72;
    if (has_rtt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rtt());
    }

    // optional .RemyBuffers.Range num_senders = 73;
    if (has_num_senders()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->num_senders());
    }

    // optional .RemyBuffers.Range link_limit = 74;
    if (has_link_limit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->link_limit());
    }

    // optional double mean_off_duration = 81;
    if (has_mean_off_duration()) {
      total_size += 2 + 8;
    }

    // optional double mean_on_duration = 82;
    if (has_mean_on_duration()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigRange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConfigRange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConfigRange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConfigRange::MergeFrom(const ConfigRange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_link_packets_per_ms()) {
      mutable_link_packets_per_ms()->::RemyBuffers::Range::MergeFrom(from.link_packets_per_ms());
    }
    if (from.has_rtt()) {
      mutable_rtt()->::RemyBuffers::Range::MergeFrom(from.rtt());
    }
    if (from.has_num_senders()) {
      mutable_num_senders()->::RemyBuffers::Range::MergeFrom(from.num_senders());
    }
    if (from.has_link_limit()) {
      mutable_link_limit()->::RemyBuffers::Range::MergeFrom(from.link_limit());
    }
    if (from.has_mean_off_duration()) {
      set_mean_off_duration(from.mean_off_duration());
    }
    if (from.has_mean_on_duration()) {
      set_mean_on_duration(from.mean_on_duration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConfigRange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigRange::CopyFrom(const ConfigRange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigRange::IsInitialized() const {

  return true;
}

void ConfigRange::Swap(ConfigRange* other) {
  if (other != this) {
    std::swap(link_packets_per_ms_, other->link_packets_per_ms_);
    std::swap(rtt_, other->rtt_);
    std::swap(num_senders_, other->num_senders_);
    std::swap(link_limit_, other->link_limit_);
    std::swap(mean_off_duration_, other->mean_off_duration_);
    std::swap(mean_on_duration_, other->mean_on_duration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConfigRange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigRange_descriptor_;
  metadata.reflection = ConfigRange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetConfig::kMeanOnDurationFieldNumber;
const int NetConfig::kMeanOffDurationFieldNumber;
const int NetConfig::kNumSendersFieldNumber;
const int NetConfig::kLinkPptFieldNumber;
const int NetConfig::kDelayFieldNumber;
const int NetConfig::kLinkLimitFieldNumber;
#endif  // !_MSC_VER

NetConfig::NetConfig()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetConfig::InitAsDefaultInstance() {
}

NetConfig::NetConfig(const NetConfig& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetConfig::SharedCtor() {
  _cached_size_ = 0;
  mean_on_duration_ = 0;
  mean_off_duration_ = 0;
  num_senders_ = 0u;
  link_ppt_ = 0;
  delay_ = 0;
  link_limit_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetConfig::~NetConfig() {
  SharedDtor();
}

void NetConfig::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NetConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetConfig_descriptor_;
}

const NetConfig& NetConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_dna_2eproto();
  return *default_instance_;
}

NetConfig* NetConfig::default_instance_ = NULL;

NetConfig* NetConfig::New() const {
  return new NetConfig;
}

void NetConfig::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mean_on_duration_ = 0;
    mean_off_duration_ = 0;
    num_senders_ = 0u;
    link_ppt_ = 0;
    delay_ = 0;
    link_limit_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double mean_on_duration = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_on_duration_)));
          set_has_mean_on_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_mean_off_duration;
        break;
      }

      // optional double mean_off_duration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_mean_off_duration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &mean_off_duration_)));
          set_has_mean_off_duration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_senders;
        break;
      }

      // optional uint32 num_senders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_senders:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_senders_)));
          set_has_num_senders();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_link_ppt;
        break;
      }

      // optional double link_ppt = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_link_ppt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &link_ppt_)));
          set_has_link_ppt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(41)) goto parse_delay;
        break;
      }

      // optional double delay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_link_limit;
        break;
      }

      // optional uint32 link_limit = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_link_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &link_limit_)));
          set_has_link_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double mean_on_duration = 1;
  if (has_mean_on_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->mean_on_duration(), output);
  }

  // optional double mean_off_duration = 2;
  if (has_mean_off_duration()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->mean_off_duration(), output);
  }

  // optional uint32 num_senders = 3;
  if (has_num_senders()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->num_senders(), output);
  }

  // optional double link_ppt = 4;
  if (has_link_ppt()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->link_ppt(), output);
  }

  // optional double delay = 5;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->delay(), output);
  }

  // optional uint32 link_limit = 6;
  if (has_link_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->link_limit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetConfig::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double mean_on_duration = 1;
  if (has_mean_on_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->mean_on_duration(), target);
  }

  // optional double mean_off_duration = 2;
  if (has_mean_off_duration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->mean_off_duration(), target);
  }

  // optional uint32 num_senders = 3;
  if (has_num_senders()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->num_senders(), target);
  }

  // optional double link_ppt = 4;
  if (has_link_ppt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->link_ppt(), target);
  }

  // optional double delay = 5;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->delay(), target);
  }

  // optional uint32 link_limit = 6;
  if (has_link_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->link_limit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double mean_on_duration = 1;
    if (has_mean_on_duration()) {
      total_size += 1 + 8;
    }

    // optional double mean_off_duration = 2;
    if (has_mean_off_duration()) {
      total_size += 1 + 8;
    }

    // optional uint32 num_senders = 3;
    if (has_num_senders()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num_senders());
    }

    // optional double link_ppt = 4;
    if (has_link_ppt()) {
      total_size += 1 + 8;
    }

    // optional double delay = 5;
    if (has_delay()) {
      total_size += 1 + 8;
    }

    // optional uint32 link_limit = 6;
    if (has_link_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->link_limit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetConfig::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetConfig* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetConfig*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetConfig::MergeFrom(const NetConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mean_on_duration()) {
      set_mean_on_duration(from.mean_on_duration());
    }
    if (from.has_mean_off_duration()) {
      set_mean_off_duration(from.mean_off_duration());
    }
    if (from.has_num_senders()) {
      set_num_senders(from.num_senders());
    }
    if (from.has_link_ppt()) {
      set_link_ppt(from.link_ppt());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
    if (from.has_link_limit()) {
      set_link_limit(from.link_limit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetConfig::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetConfig::CopyFrom(const NetConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetConfig::IsInitialized() const {

  return true;
}

void NetConfig::Swap(NetConfig* other) {
  if (other != this) {
    std::swap(mean_on_duration_, other->mean_on_duration_);
    std::swap(mean_off_duration_, other->mean_off_duration_);
    std::swap(num_senders_, other->num_senders_);
    std::swap(link_ppt_, other->link_ppt_);
    std::swap(delay_, other->delay_);
    std::swap(link_limit_, other->link_limit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetConfig_descriptor_;
  metadata.reflection = NetConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RemyBuffers

// @@protoc_insertion_point(global_scope)
