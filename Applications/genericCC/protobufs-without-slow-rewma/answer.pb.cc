// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: answer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "answer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace AnswerBuffers {

namespace {

const ::google::protobuf::Descriptor* SenderResults_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SenderResults_reflection_ = NULL;
const ::google::protobuf::Descriptor* ThroughputsDelays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ThroughputsDelays_reflection_ = NULL;
const ::google::protobuf::Descriptor* Outcome_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Outcome_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_answer_2eproto() {
  protobuf_AddDesc_answer_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "answer.proto");
  GOOGLE_CHECK(file != NULL);
  SenderResults_descriptor_ = file->message_type(0);
  static const int SenderResults_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderResults, throughput_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderResults, delay_),
  };
  SenderResults_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SenderResults_descriptor_,
      SenderResults::default_instance_,
      SenderResults_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderResults, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SenderResults, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SenderResults));
  ThroughputsDelays_descriptor_ = file->message_type(1);
  static const int ThroughputsDelays_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThroughputsDelays, config_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThroughputsDelays, results_),
  };
  ThroughputsDelays_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ThroughputsDelays_descriptor_,
      ThroughputsDelays::default_instance_,
      ThroughputsDelays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThroughputsDelays, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ThroughputsDelays, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ThroughputsDelays));
  Outcome_descriptor_ = file->message_type(2);
  static const int Outcome_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outcome, throughputs_delays_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outcome, score_),
  };
  Outcome_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Outcome_descriptor_,
      Outcome::default_instance_,
      Outcome_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outcome, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Outcome, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Outcome));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_answer_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SenderResults_descriptor_, &SenderResults::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ThroughputsDelays_descriptor_, &ThroughputsDelays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Outcome_descriptor_, &Outcome::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_answer_2eproto() {
  delete SenderResults::default_instance_;
  delete SenderResults_reflection_;
  delete ThroughputsDelays::default_instance_;
  delete ThroughputsDelays_reflection_;
  delete Outcome::default_instance_;
  delete Outcome_reflection_;
}

void protobuf_AddDesc_answer_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::RemyBuffers::protobuf_AddDesc_dna_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014answer.proto\022\rAnswerBuffers\032\tdna.proto"
    "\"2\n\rSenderResults\022\022\n\nthroughput\030\013 \001(\001\022\r\n"
    "\005delay\030\014 \001(\001\"j\n\021ThroughputsDelays\022&\n\006con"
    "fig\030\025 \001(\0132\026.RemyBuffers.NetConfig\022-\n\007res"
    "ults\030\026 \003(\0132\034.AnswerBuffers.SenderResults"
    "\"V\n\007Outcome\022<\n\022throughputs_delays\030  \003(\0132"
    " .AnswerBuffers.ThroughputsDelays\022\r\n\005sco"
    "re\030! \001(\001", 288);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "answer.proto", &protobuf_RegisterTypes);
  SenderResults::default_instance_ = new SenderResults();
  ThroughputsDelays::default_instance_ = new ThroughputsDelays();
  Outcome::default_instance_ = new Outcome();
  SenderResults::default_instance_->InitAsDefaultInstance();
  ThroughputsDelays::default_instance_->InitAsDefaultInstance();
  Outcome::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_answer_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_answer_2eproto {
  StaticDescriptorInitializer_answer_2eproto() {
    protobuf_AddDesc_answer_2eproto();
  }
} static_descriptor_initializer_answer_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SenderResults::kThroughputFieldNumber;
const int SenderResults::kDelayFieldNumber;
#endif  // !_MSC_VER

SenderResults::SenderResults()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SenderResults::InitAsDefaultInstance() {
}

SenderResults::SenderResults(const SenderResults& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SenderResults::SharedCtor() {
  _cached_size_ = 0;
  throughput_ = 0;
  delay_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SenderResults::~SenderResults() {
  SharedDtor();
}

void SenderResults::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SenderResults::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SenderResults::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SenderResults_descriptor_;
}

const SenderResults& SenderResults::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_answer_2eproto();
  return *default_instance_;
}

SenderResults* SenderResults::default_instance_ = NULL;

SenderResults* SenderResults::New() const {
  return new SenderResults;
}

void SenderResults::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    throughput_ = 0;
    delay_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SenderResults::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional double throughput = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &throughput_)));
          set_has_throughput();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(97)) goto parse_delay;
        break;
      }

      // optional double delay = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_delay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &delay_)));
          set_has_delay();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SenderResults::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional double throughput = 11;
  if (has_throughput()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->throughput(), output);
  }

  // optional double delay = 12;
  if (has_delay()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->delay(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SenderResults::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional double throughput = 11;
  if (has_throughput()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->throughput(), target);
  }

  // optional double delay = 12;
  if (has_delay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->delay(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SenderResults::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional double throughput = 11;
    if (has_throughput()) {
      total_size += 1 + 8;
    }

    // optional double delay = 12;
    if (has_delay()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SenderResults::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SenderResults* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SenderResults*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SenderResults::MergeFrom(const SenderResults& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_throughput()) {
      set_throughput(from.throughput());
    }
    if (from.has_delay()) {
      set_delay(from.delay());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SenderResults::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SenderResults::CopyFrom(const SenderResults& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SenderResults::IsInitialized() const {

  return true;
}

void SenderResults::Swap(SenderResults* other) {
  if (other != this) {
    std::swap(throughput_, other->throughput_);
    std::swap(delay_, other->delay_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SenderResults::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SenderResults_descriptor_;
  metadata.reflection = SenderResults_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ThroughputsDelays::kConfigFieldNumber;
const int ThroughputsDelays::kResultsFieldNumber;
#endif  // !_MSC_VER

ThroughputsDelays::ThroughputsDelays()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ThroughputsDelays::InitAsDefaultInstance() {
  config_ = const_cast< ::RemyBuffers::NetConfig*>(&::RemyBuffers::NetConfig::default_instance());
}

ThroughputsDelays::ThroughputsDelays(const ThroughputsDelays& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ThroughputsDelays::SharedCtor() {
  _cached_size_ = 0;
  config_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ThroughputsDelays::~ThroughputsDelays() {
  SharedDtor();
}

void ThroughputsDelays::SharedDtor() {
  if (this != default_instance_) {
    delete config_;
  }
}

void ThroughputsDelays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ThroughputsDelays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ThroughputsDelays_descriptor_;
}

const ThroughputsDelays& ThroughputsDelays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_answer_2eproto();
  return *default_instance_;
}

ThroughputsDelays* ThroughputsDelays::default_instance_ = NULL;

ThroughputsDelays* ThroughputsDelays::New() const {
  return new ThroughputsDelays;
}

void ThroughputsDelays::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_config()) {
      if (config_ != NULL) config_->::RemyBuffers::NetConfig::Clear();
    }
  }
  results_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ThroughputsDelays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .RemyBuffers.NetConfig config = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_results;
        break;
      }

      // repeated .AnswerBuffers.SenderResults results = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_results:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_results()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_results;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ThroughputsDelays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .RemyBuffers.NetConfig config = 21;
  if (has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->config(), output);
  }

  // repeated .AnswerBuffers.SenderResults results = 22;
  for (int i = 0; i < this->results_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->results(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ThroughputsDelays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .RemyBuffers.NetConfig config = 21;
  if (has_config()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->config(), target);
  }

  // repeated .AnswerBuffers.SenderResults results = 22;
  for (int i = 0; i < this->results_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->results(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ThroughputsDelays::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .RemyBuffers.NetConfig config = 21;
    if (has_config()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->config());
    }

  }
  // repeated .AnswerBuffers.SenderResults results = 22;
  total_size += 2 * this->results_size();
  for (int i = 0; i < this->results_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->results(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ThroughputsDelays::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ThroughputsDelays* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ThroughputsDelays*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ThroughputsDelays::MergeFrom(const ThroughputsDelays& from) {
  GOOGLE_CHECK_NE(&from, this);
  results_.MergeFrom(from.results_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_config()) {
      mutable_config()->::RemyBuffers::NetConfig::MergeFrom(from.config());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ThroughputsDelays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ThroughputsDelays::CopyFrom(const ThroughputsDelays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ThroughputsDelays::IsInitialized() const {

  return true;
}

void ThroughputsDelays::Swap(ThroughputsDelays* other) {
  if (other != this) {
    std::swap(config_, other->config_);
    results_.Swap(&other->results_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ThroughputsDelays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ThroughputsDelays_descriptor_;
  metadata.reflection = ThroughputsDelays_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Outcome::kThroughputsDelaysFieldNumber;
const int Outcome::kScoreFieldNumber;
#endif  // !_MSC_VER

Outcome::Outcome()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Outcome::InitAsDefaultInstance() {
}

Outcome::Outcome(const Outcome& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Outcome::SharedCtor() {
  _cached_size_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Outcome::~Outcome() {
  SharedDtor();
}

void Outcome::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Outcome::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Outcome::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Outcome_descriptor_;
}

const Outcome& Outcome::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_answer_2eproto();
  return *default_instance_;
}

Outcome* Outcome::default_instance_ = NULL;

Outcome* Outcome::New() const {
  return new Outcome;
}

void Outcome::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    score_ = 0;
  }
  throughputs_delays_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Outcome::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .AnswerBuffers.ThroughputsDelays throughputs_delays = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_throughputs_delays:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_throughputs_delays()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_throughputs_delays;
        if (input->ExpectTag(265)) goto parse_score;
        break;
      }

      // optional double score = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Outcome::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .AnswerBuffers.ThroughputsDelays throughputs_delays = 32;
  for (int i = 0; i < this->throughputs_delays_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->throughputs_delays(i), output);
  }

  // optional double score = 33;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(33, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Outcome::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .AnswerBuffers.ThroughputsDelays throughputs_delays = 32;
  for (int i = 0; i < this->throughputs_delays_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->throughputs_delays(i), target);
  }

  // optional double score = 33;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(33, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Outcome::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional double score = 33;
    if (has_score()) {
      total_size += 2 + 8;
    }

  }
  // repeated .AnswerBuffers.ThroughputsDelays throughputs_delays = 32;
  total_size += 2 * this->throughputs_delays_size();
  for (int i = 0; i < this->throughputs_delays_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->throughputs_delays(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Outcome::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Outcome* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Outcome*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Outcome::MergeFrom(const Outcome& from) {
  GOOGLE_CHECK_NE(&from, this);
  throughputs_delays_.MergeFrom(from.throughputs_delays_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Outcome::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Outcome::CopyFrom(const Outcome& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Outcome::IsInitialized() const {

  return true;
}

void Outcome::Swap(Outcome* other) {
  if (other != this) {
    throughputs_delays_.Swap(&other->throughputs_delays_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Outcome::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Outcome_descriptor_;
  metadata.reflection = Outcome_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace AnswerBuffers

// @@protoc_insertion_point(global_scope)
